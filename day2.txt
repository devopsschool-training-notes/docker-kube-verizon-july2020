13.233.9.170
================================================
Image has multiple Layers	DONE
Each layer is file system	DONE
each layer has UUID by Sha256	DONE
Image - Bottom Layer is roofts	DONE
Mulitple layers get merged by Union mounts and get attached to container as a mnt DONE
In case of layer conflicts, top layer alwayes win DONE
Each container gets one writeable layer DONE
Image layer is read only. DONE
========================================
Where is the location of Images and Layers?

Image - Meta Info
Layer - File system

$ docker info
Docker Root Dir: /var/lib/docker
Storage Driver: overlay2

[root@ip-172-31-6-199 docker]# pwd
/var/lib/docker
[root@ip-172-31-6-199 docker]# ls -1
builder
buildkit
containers		Container Meta info
image			Image Meta info		
network			Image Meta info	
overlay2		Layers filesystem		
plugins
runtimes
swarm
tmp
trust
volumes
[root@ip-172-31-6-199 docker]#
=========================================================================
docker inspect
docker history
du -h --max-depth=1
========================================================

Docker Commands - Monitoring Containers
Command	Description
logs	Fetch the logs of a container		PID 1 process
ps	List containers
stats	Display a live stream of container(s) resource usage statistics
top	Display the running processes of a container
events	Get real time events from the server

 171  docker ps
  172  docker run -d jenkins
  173  clear
  174  ls
  175  clear
  176  docker ps
  177  docker logs 45c5b0afe4ab
  178  clear
  179  ls
  180  clear
  181  dockr ps
  182  docker ps
  183  docker logs 4a3561fa1547
  184  docker logs 4a3561fa1547
  185  clear
  186  ls
  187  clear
  188  docker stats
  189  docker stats 45c5b0afe4ab
  190  docker top
  191  docker top 45c5b0afe4ab
  192  docker exec 45c5b0afe4ab ps -eaf
  193  ps -eaf | grep 9618
  194  ps -eaf | grep 9593
  195* ps -eaf | grep 9
  196  clear
  197  ps -eaf | grep 9593
  198  kill -9 9618
  199  ps -eaf | grep 9593
  200  docker ps
  201  docker ps -a
  202  clear
  203  ls

docker events

========================================================
========================================================
How to create images?
---------------------
Method 1 - Manual Method	using Container

Method 2 - Automatic Method	using Dockerfile

base - ubuntu		DONE
- update		DONE
- git			DONE
- java			DONE
- apache2		DONE

=====================================
docker commit -m"adding ub+up+git+ja+apc" b75d28697f6a ub-up-git-ja-apc


  90  docker start 4855b28c6381
   91  ls
   92  pwd
   93  cd ..
   94  clear
   95  docker stop 4855b28c6381
   96  docker rm 4855b28c6381
   97  cd -
   98  clear
   99  docker run -it ubuntu
  100  docker ps
  101  clear
  102  docker images
  103  docker commit -m"adding ub+up+git+ja+apc" b75d28697f6a ub-up-git-ja-apc
  104  docker images
  105  docker run -itd --name before ubuntu
  106  docker run -itd --name after ub-up-git-ja-apc
  107  docker exec before git
  108  docker exec after git
  109  clear
  110  docker s
  111  clear
  112  docker ps
  113  docker imatges
  114  docker images
  115  docker history ub-up-git-ja-apc
  116  docker history ubuntu
  117  clear
  118  docker commit -m"adding ub+up+git+ja+apc" b75d28697f6a ub-up-git-ja-apc
  119  docker images
  120  docker tag 635747a8fb1e rrr
  121  docker images
=====================================================
=====================================================
=====================================================

How to share images?
----------------------
1. Using Tar Ball
 128  docker images
  129  docker save -o ub-up-git-ja-apc.tar ub-up-git-ja-apc
  130  ls
  131  du -sh ub-up-git-ja-apc.tar
  132  ls
  133  docker rmi ub-up-git-ja-apc
  134  docker images
  135  docker load -i ub-up-git-ja-apc.tar
  136  docker images


2. Using Public Repo			DONE
	- hub.docker.com
	- google registry
Step 1- Register at hub.docker.com	DONE
Step 2 - Verify your account		DONE
Step 3 - Login to hub.docker.com and create public repo	DONE
Step 4 - LOgin to hub.docker.com by your workstation?
	$ docker login

 139  docker images
  140  docker login
  141  docker push ub-up-git-ja-apc
  142  docker tag ub-up-git-ja-apc devopsschools/ver-demo-july
  143  docker images
  144  clear
  145  docker push devopsschools/ver-demo-july
  146  docker tag ub-up-git-ja-apc devopsschools/ver-demo-july:v1
  147  docker images
  148  docker push devopsschools/ver-demo-july:v1
  149  history



3. Using Private repo
	- Artiactory
	- Nexus


=============================================================
=============================================================
=============================================================
container are emph*
=======================
How can we have container data persistency???
===========
Sol - Docker volume
 - volume - /var/lib/docker/volumes
 178  docker volume
  179  docker volume ls
  180  ls
  181  clear
  182  docker volume create dev
  183  docker volume ls
  184  ls
  185  docker volume create qa
  186  ls
  187  docker volume ls
  188  docker run -itd -v dev:/opt/rajesh ubuntu
  189  docker ps
  190  docker exec 402f98d86908 df -kh
  191  docker attach 402f98d86908
  192  docker exec 402f98d86908 df -kh
  193  docker exec 402f98d86908 ls /opt/rajesh
  194  docker stop 402f98d86908
  195  docker rm 402f98d86908
  196  ls
  197  find . -name rajesh*
  198  docker run -itd -v dev:/opt/rajesh ubuntu
  199  docker exec 19cdcc0d9184666040369b62a155ff162a8521c0ed721e56eaf6fde92d62f40a df -kh
  200  docker exec 19cdcc0d9184666040369b62a155ff162a8521c0ed721e56eaf6fde92d62f40a ls /opt/rajesh
  201  docker volume
  202  docker volume ls
  203  docker volume prune
  204  docker volume ls
  205  docker volume rm dev


 - mntfs - ANY PLACE IN HOST MACHINE
 209  cd /opt/
  210  ls
  211  mkdir backup
  212  cd backup/
  213  pwd
  214  docker run -itd -v /opt/backup:/opt/raju ubuntu
  215  pwd
  216  touch raju1.txt
  217  docker ps
  218  docker exec 8c84f52962b3 ls /opt//raju
  219  docker exec 8c84f52962b3 touch /opt/raju/raju2.txt
  220  ls
  221  docker stop 8c84f52962b3
  222  docker rm 8c84f52962b3


 - tempfs - in Memory

===================================================
Method 2 - Automatic Method	using Dockerfile


FROM ubuntu
MAINTAINER Rajesh Kumar DevOps@Rajeshkumar.xyz
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update
RUN apt-get install git -y
RUN apt-get install openjdk-8-jdk -y tzdata

$ docker build -t image1 .


Assignemet:
- What is the name of Volume of Jenkins container? and where it is.
- What is the env set in jenkins container?
- Jenkins Container is running with which users?
- Jenkins container is running with which are the port?

===================================================================================
===================================================================================
jenkins
	openjdk:8-jdk
		buildpack-deps:buster-scm		
			buildpack-deps:buster-curl
				debian:buster	
					scratch

===================================================================
Each line in Docker file would create one layer.
Kind of layer
		- Meta 	- Image
		- Data - overlay2
Each layer get created based on FROM image.

FROM ubuntu
MAINTAINER Rajesh Kumar DevOps@Rajeshkumar.xyz
RUN touch /opt/ramu1.txt
RUN touch /opt/ramu2.txt
RUN touch /opt/ramu3.txt



FROM
MAINTAINER
RUN
ARG
ENV
VOLUME
COPY
USER
EXPOSE
==================
Assingment - Create one image using UBUNTU

CMD  Vs EntryPOINT
==============================
How to make PID1 in Image so we get in container?
======================================================
CMD 
	WHY TO MAKE PID1
	CMD can be replaced
ENTRYPOINT
	WHY TO MAKE PID1
	ENTRYPOINT can NOT be replaced

FROM ubuntu
MAINTAINER Rajesh Kumar DevOps@Rajeshkumar.xyz
RUN touch /opt/ramu1.txt
CMD /bin/ls

FROM ubuntu
MAINTAINER Rajesh Kumar DevOps@Rajeshkumar.xyz
RUN touch /opt/ramu1.txt
ENTRYPOINT  /bin/ls


/bin/sh -c /bin/ls
=======================
Mode of executions
=================
SHELL MODE - /bin/sh -c /bin/ls
		/bin/bash
EXEC MODE ["/bin/tini", "--", "/usr/local/bin/jenkins.sh"] 
	["/bin/bash"]


Assigment 1
===============================
a Dockerfile which has 2 CMD?
a Dockerfile which has 2 ENTRYPOINT
a Dockerfile which one CMD and ONE ENTRYPOINT

==================
Assingment 2- Create one image using UBUNTU
FROM
MAINTAINER
RUN
ARG
ENV
VOLUME
COPY
USER
EXPOSE

Assigment 3
https://www.devopsschool.com/tutorial/docker/dockerfile/dockerfile-example-sample-lab.html


