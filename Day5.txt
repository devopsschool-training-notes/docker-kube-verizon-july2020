What is Services?
=====================
	its a loadbalancer on POD network Balancing POD(S)
	Its managed services
				----MASTER------	-------WORKER---------------
Human(YAML) ---> Kubectl 	-> APISERVER	->	Kubelet		- PODS
				- ETCD			- docker 	
				- Schedular		- proxy
				- Controllermgr
			

END USER???
====================================================
13.127.75.62

 465  kubectl decribe node ip-172-31-26-2.ap-south-1.compute.internal
  466  kubectl describe node ip-172-31-26-2.ap-south-1.compute.internal
  467  clear
  468  ls
  469  histor
  470  clear
  471  history
  472  clear
  473  kubectl taint nodes ip-172-31-26-2.ap-south-1.compute.internal server=web:NoSchedule-
  474  kubectl describe node ip-172-31-26-2.ap-south-1.compute.internal
  475  clear
  476  ls
  477  kubectl get pods
  478  kubectl get pods -o wide
  479  kubectl get pods -o wide --show-lables
  480  kubectl get pods -o wide --show-labels
  481  clear
  482  kubectl create -h
  483  kubectl create service -h
  484  CLEAR
  485  clear
  486  kubectl create service clusterip -h
 486  kubectl create service clusterip -h
  487  cler
  488  clear
  489  history
  490  clear
  491  kubectl create service clusterip my-cs --tcp=5678:80
  492  kubectl get svc
  493  kubectl describe svc my-cs
  494  clear
  495  ls
  496  kubectl get svc --show-lables
  497  kubectl get svc --show-labels
  498  kubectl get pods --show-labels
  499* curl http://
  500  kubectl get pods --show-labels -o wide
  501  curl http://10.44.0.1
  502  kubectl get svc --show-labels
  503  kubectl edit pod taint-demo
  504  clear
  505  kubectl get pods --show-labels -o wide
  506  kubectl get svc --show-labels
  507  curl http://10.101.76.250
  508  curl http://10.101.76.250:5678
  509  kubectl describe svc my-cs
  510  kubectl edit svc my-cs
  511  kubectl describe svc my-cs
  512  curl http://10.101.76.250:5678
  513  kubectl edit svc my-cs
  514  kubectl describe svc my-cs
  515  curl http://10.101.76.250:5678
  516  kubectl edit pod taint-demo
  517  curl http://10.101.76.250:5678


kubectl create service clusterip my-cs --tcp=5678:80

Available Commands:
  clusterip    Create a ClusterIP service.		[default]
  nodeport     Create a NodePort service.	
  externalname Create an ExternalName service.
  loadbalancer Create a LoadBalancer service.

clusterip = Create a SVC(LB) on Pod network
nodeport = Create a SVC(LB) on Pod network + exposed at NODE Port
loadbalancer = Create a SVC(LB) on Pod network + exposed at NODE Port + Map NodePort at Ext LB.

Assignment
================
What is this?
[ec2-user@ip-172-31-23-196 ~]$ kubectl get svc
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   18d
[ec2-user@ip-172-31-23-196 ~]$

=====================================================================
=====================================================================

kubectl create deployment my-dep --image=scmgalaxy/nginx-devopsschoolv1
kubectl expose deploy my-dep --port=8080 --target-port=80


  520  ls
  521  kubectl create deployment my-dep --image=scmgalaxy/nginx-devopsschoolv1
  522  kubectl get deplpy
  523  kubectl get deploy
  524  kubectl scale --replicas=5 deploy/my-dep
  525  clear
  526  l
  527  clear
  528  ls
  529  kubectl get pods --show-labels
  530  kubectl expose
  531  kubectl expose -h
  532  clear
  533  kubectl expose deploy my-dep --port=8080 --target-port=80
  534  kubectl get svc
  535  curl http://10.108.70.247:8080
  536  kubectl describe svc my-dep
  537  clear


kubectl expose deploy my-dep --port=8080 --target-port=80
kubectl expose deploy my-dep --port=8080 --target-port=80 --type=NodePort --name=nodesvc

--port=8080 = SVC Port
--target-port=80 = Container Port
NodePort- Exposed Default

  543  clear
  544  kubectl expose deploy my-dep --port=8080 --target-port=80 --type=NodePort
  545  clear
  546  kubectl expose deploy my-dep --port=8080 --target-port=80 --type=NodePort --name=nodesvc
  547  kubectl get svc
  548  curl http://10.102.228.28:8080
  549  curl http://13.127.75.62:31109/
  550  history

kubectl expose deploy my-dep --port=8080 --target-port=80 --type=LoadBalancer --name=lb



 548  curl http://10.102.228.28:8080
  549  curl http://13.127.75.62:31109/
  550  history
  551  kubectl expose -h
  552  clear
  553  kubectl expose deploy my-dep --port=8080 --target-port=80 --type=LoadBalancer --name=lb
  554  kubectl get svc
  555  history
====================================================================
====================================================================
Storage
================
Storage Interface
===================

Container -> POD -> Kubernetes --> Storage Interface --> Physical Storage
============================================================================
Ops			-> Would create volume and keep it available in K8s.
Enginerring 		- Would use that vol and mount at POD --> You can use in the cont.


Types of Volumes
================================
awsElasticBlockStore
azureDisk
azureFile
cephfs
cinder
configMap
csi
downwardAPI
emptyDir
fc (fibre channel)
flexVolume
flocker
gcePersistentDisk
gitRepo (deprecated)
glusterfs
hostPath
iscsi
local
nfs
persistentVolumeClaim
projected
portworxVolume
quobyte
rbd
scaleIO
secret
storageos
vsphereVolume
=============================
hostPath
https://www.devopsschool.com/blog/persistentvolume-persistentvolumeclaim-volumes-using-hostpath/

Action with Ops
========================
Ops			-> Would create volume and keep it available in K8s.
- PV = PersistentVolume


kind: PersistentVolume
apiVersion: v1
metadata:
  name: hostpath
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/tmp/devopsschool"




Enginerring 		- Would use that vol and mount at POD --> You can use in the cont.
- PVC 
- USING in POD

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvchostpath
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi




kind: Pod
apiVersion: v1
metadata:
  name: task-pv-pod
spec:
  containers:
    - name: task-pv-container
      image: scmgalaxy/nginx-devopsschoolv1
      ports:
        - containerPort: 80
          name: "http-server"
      volumeMounts:
        - mountPath: "/usr/share/nginx/html"
          name: task-pv-storage
  volumes:
    - name: task-pv-storage
      persistentVolumeClaim:
        claimName: pvchostpath


35.154.246.78

 558  kubectl get nodes
  559  ls
  560  vi pv.yaml
  561  kubectl get pv
  562  kubectl apply -f pv.yaml
  563  kubectl get pv
  564  clear
  565  vi pvc.yaml
  566  kubectl get pvc
  567  kubectl get pv
  568  kubectl apply -f pvc.yaml
  569  vi pvc.yaml
  570  kubectl apply -f pvc.yaml
  571  kubectl get pvc
  572  kubectl get pv
  573  clear
  574  ls
  575  kubectl get pvc
  576  clear
  577  ls
  578  pvcpod.yaml
  579  vi pvcpod.yaml
  580  kubectl  apply -f pvcpod.yaml
  581  kubectl get pods
  582  kubectl exec task-pv-pod ls /usr/share/nginx/html
  583  clear
  584  kubectl exec task-pv-pod touch /usr/share/nginx/html/rrrr
  585  clear
  586  kubectl delete pod task-pv-pod
===================================================================
Kubernetes Authentication and Authorization
===============================================
Authentication  - How to get into kubernetes
- cert
Authorization - What I am Authorized to do?
- RBAC

ROLE BASED ACCESS CONTROl
-----------------------------------------
TYPES OF USERS
	NORMAL			CAN NOT BE CREATED THROUGH API.
	ServiceAccount		API

Types of Roles 
	Role			DONE
	ClustorRole		DONE

Types of Binding
	RoleBinding		DONE
	ClustorRoleBinding	DONE

TYPE OF ACCESS VERB
https://kubernetes.io/docs/reference/access-authn-authz/authorization/

=====================================================
How to add a normal user and grant his access to k8s clustor?
1. Generate a user PUB and PVT
2. using Pvt file, generate csr
3. Send csr to k8 admin to approve csr to get cert key
4. Admin would add user to Role or Clustor role using RoleBinding or ClusterRoleBinding.
5. Set "cert key" and pvt key to inside kube config file.

kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: office
  name: deployment-manager
rules:
- apiGroups: ["", "extensions", "apps"]
  resources: ["deployments", "replicasets", "pods"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"] # You can also use ["*"]


kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: deployment-manager-binding
  namespace: office
subjects:
- kind: User
  name: employee
  apiGroup: ""
roleRef:
  kind: Role
  name: deployment-manager
  apiGroup: ""

kubectl config set-credentials employee --client-certificate=/home/ec2-user/user/employee.crt  --client-key=/home/ec2-user/user/employee.key

  594  kubectl create namespace office
  595  openssl genrsa -out employee.key 2048
  596  ls
  597  openssl req -new -key employee.key -out employee.csr -subj "/CN=employee/O=bitnami"
  598  ls
  599  owd
  600  pwd
  601  sudo openssl x509 -req -in /home/ec2-user/user/employee.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out /home/ec2-user/user/employee.crt -days 500
  602  clear
  603  ls
  604  rm -rf employee.csr
  605  clear
  606  kubectl config set-credentials employee --client-certificate=/home/ec2-user/user/employee.crt  --client-key=/home/ec2-user/user/employee.key
  607  more ~/.kube/config
  608  clear
  609  kubectl config set-context employee-context --cluster=kubernetes --namespace=office --user=employee
  610  kubectl --context=employee-context get pods
  611  clear
  612  ls
  613  vi role.pem
  614  kubectl apply -f role.pem
  615  kubectl get roles
  616  kubectl get role
  617  kubectl get role -n=office
  618  vi rb.yaml
  619  kubectl apply -f rb.yaml
  620  kubectl get rolebinding
  621  kubectl get rolebinding -n=offie
  622  kubectl get rolebinding -n=office
  623  clear
  624  kubectl --context=employee-context get pods
  625  kubectl --context=employee-context get svc
  626  history

Reference
https://github.com/devopsschool-training-notes/Certified-Kubernetes-Administrator/blob/master/april-2020-batch/31-may-2020.txt


